basePath: /
definitions:
  web.UserCreateRequest:
    properties:
      name:
        example: John Doe
        type: string
      password:
        example: "123456"
        type: string
      password_confirm:
        example: "123456"
        type: string
      username:
        example: johndoe
        type: string
    required:
    - name
    - password
    - password_confirm
    - username
    type: object
  web.UserLoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  web.UserLoginResponse:
    properties:
      created_at:
        example: "2025-04-03T01:13:12Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      token:
        example: Generated token
        type: string
      token_expired_at:
        example: "2025-04-03T01:13:12Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  web.UserResponse:
    properties:
      created_at:
        example: "2025-04-03T01:13:12Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      username:
        example: johndoe
        type: string
    type: object
  web.UserUpdateRequest:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      password:
        example: "123456"
        type: string
      password_confirm:
        example: "123456"
        type: string
      username:
        example: johndoe
        type: string
    required:
    - username
    type: object
  web.WebResponse:
    properties:
      code:
        example: 400
        type: integer
      data: {}
      status:
        example: BAD REQUEST | ERROR NOT FOUND | UNAUTHORIZED | CONFLICT
        type: string
    type: object
host: imasaminda.my.id
info:
  contact: {}
  description: This is a sample API with JWT authentication
  title: User API
  version: "1.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Login with username and password to generate a token
      parameters:
      - description: Login Information
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/web.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.UserLoginResponse'
        "400":
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/web.WebResponse'
      summary: Login
      tags:
      - User
  /api/users:
    get:
      consumes:
      - application/json
      description: Retrieve all users (Requires JWT Token)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/web.UserResponse'
            type: array
        "401":
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User Create Information
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/web.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.UserResponse'
        "400":
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/web.WebResponse'
        "409":
          description: CONFLICT
          schema:
            $ref: '#/definitions/web.WebResponse'
      summary: Create User
      tags:
      - User
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/web.WebResponse'
        "401":
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/web.WebResponse'
        "404":
          description: NOT FOUND
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.UserResponse'
        "400":
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/web.WebResponse'
        "401":
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/web.WebResponse'
        "404":
          description: NOT FOUND
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Information
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/web.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.UserResponse'
        "400":
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/web.WebResponse'
        "401":
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/web.WebResponse'
        "404":
          description: NOT FOUND
          schema:
            $ref: '#/definitions/web.WebResponse'
        "409":
          description: CONFLICT
          schema:
            $ref: '#/definitions/web.WebResponse'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - User
schemes:
- https
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
